{
  "hash": "38cd4f58673b18de1fcf5d3b6c4a9f36",
  "result": {
    "markdown": "---\ntitle: \"Data Visualization\"\nauthor: \"Fadel Victor Shanaa\"\n---\n\n**Challenge 5**\n\n**Part 1:**\n\n*Goal: Map the time course of the cumulative Covid-19 cases! Your plot should look like this*\n![Cumulative COVID-19 Data](challenge_1.png)\n*Adding the cases for Europe is optional. You can choose your own color theme, but don’t use the default one. Don’t forget to scale the axis properly. The labels can be added with geom_label() or with geom_label_repel() (from the package ggrepel).*\n\n**My Code and Result:**\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-1_f7fab2a766bfb52ab1a325d14f77cf4c'}\n\n```{.r .cell-code}\n# Challenge 5\n\n# Part 1\n\n# Import Libraries\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(RColorBrewer)\nlibrary(dplyr)\nlibrary(scales)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'scales'\n#> \n#> The following object is masked from 'package:purrr':\n#> \n#>     discard\n#> \n#> The following object is masked from 'package:readr':\n#> \n#>     col_factor\n```\n:::\n\n```{.r .cell-code}\n# Read the dataset\ncovid_data_tbl <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 309799 Columns: 67\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr   (4): iso_code, continent, location, tests_units\n#> dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#> date  (1): date\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# Selecting only the required columns\ncovid_data_tbl <- select(covid_data_tbl, location, date, total_cases)\n\n# Filtering for the five countries\nfiltered_tbl <- filter(covid_data_tbl, location %in% c(\"United States\", \"United Kingdom\", \"Spain\", \"France\", \"Germany\"))\n\n# Remove rows with NA values in total_cases column\nfiltered_tbl <- na.omit(filtered_tbl)\n\n# Convert the date column to the proper Date format\nfiltered_tbl$date <- as.Date(filtered_tbl$date)\n\n# Filter the data for the desired time range\nfiltered_tbl <- filtered_tbl %>%\n  filter(date >= as.Date(\"2020-01-01\") & date <= as.Date(\"2022-04-19\"))\n\n# Aggregate the cumulative cases by date and location\naggregated_data <- filtered_tbl %>%\n  group_by(location, date) %>%\n  summarise(cumulative_cases = sum(total_cases)) %>%\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `summarise()` has grouped output by 'location'. You can override using the\n#> `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\n# Plot the cumulative cases over time using a line plot\nggplot(aggregated_data, aes(x = date, y = cumulative_cases, color = location)) +\n  geom_line(linewidth = 0.8) +\n  geom_label(data = filter(aggregated_data, location == \"United States\" & date == max(date)),\n             aes(label = comma(cumulative_cases)), hjust = 1, vjust = 0, color = \"black\", fill = \"white\",\n             size = 3, label.padding = unit(0.25, \"lines\"), label.r = unit(0.15, \"lines\")) +\n  labs(x = \"\", y = \"Cumulative Cases\", color = \"Country\", title = \"COVID-19 confirmed cases worldwide\",\n       subtitle = \"As of 19-04-2022\") +\n  theme_minimal() +\n  scale_x_date(date_labels = \"%b %Y\", date_breaks = \"1 month\") +\n  scale_y_continuous(limits = c(0, 200000000), breaks = c(0, 50000000, 100000000, 150000000), \n                     labels = c(\"0 M\", \"50 M\", \"100 M\", \"150 M\")) +\n  theme(legend.position = \"bottom\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_color_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n*The discrepancy in the cumulative COVID-19 cases in the US could stem from* \n\n*either different sources of data being used or the data wrangling methods applied*\n\n**Part 2:**\n\n**Goal: Visualize the distribution of the mortality rate (deaths / population) with geom_map() (alternatively, you can plot the case-fatality rate (deaths / cases)). The necessary longitudinal and lateral data can be accessed with this function:**\n\n\nworld <- map_data(\"world\")\nThis data has also to be put in the map argument of geom_map():\n\nplot_data %>% ggplot( ... ) +\n  geom_map(aes(map_id = ..., ... ), map = world, ... ) +\n  %>% \n  mutate(location = case_when(\n\n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    TRUE ~ location\n\n  )) %>%\n  distinct()\n\n\n**My Code and Result: **\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-2_2eb9f4e9c474e8ea24848c7363c93216'}\n\n```{.r .cell-code}\n# Part 2\n\n# Import Libraries\n\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(maps)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'maps'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following object is masked from 'package:purrr':\n#> \n#>     map\n```\n:::\n\n```{.r .cell-code}\nlibrary(scales)\n\n# Load the world map data\nworld <- map_data(\"world\")\n\n# Read the dataset\ncovid_data_tbl <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 309799 Columns: 67\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr   (4): iso_code, continent, location, tests_units\n#> dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#> date  (1): date\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# Filter out unnecessary cols\ncovid_data_tbl <- covid_data_tbl %>%\n  select(location, date, total_deaths, total_cases, population)\n\n# Fix the country names\ncovid_data_tbl <- covid_data_tbl %>%\n  mutate(location = case_when(\n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    TRUE ~ location\n  )) %>%\n  distinct()\n\n# Filter the data for the desired date\ntarget_date <- as.Date(\"2021-04-16\")\nfiltered_data <- covid_data_tbl %>%\n  filter(date == target_date)\n\n# Calculate mortality rate\nplot_data <- filtered_data %>% mutate(mortality_rate = total_deaths / population)\n\n# Join the datasets\nworld_covid_data <- left_join(world, plot_data, by = c(\"region\" = \"location\"))\n\n# Filter world_covid_data to only keep rows that correspond to locations in filtered_data\nworld_covid_data <- world_covid_data %>% mutate(mortality_rate = mortality_rate * 100)\n\n# Plot the map\nggplot() +\n  geom_polygon(data = world_covid_data, aes(x = long, y = lat, group = group, fill = mortality_rate)) +\n  scale_fill_gradient(name = \"Mortality Rate\", low = \"lightpink\", high = \"darkred\", na.value = \"gray\", limits = c(0, 0.7)) +\n  labs(title = paste(\"Distribution of Mortality Rate (As of\", format(target_date, \"%d/%m/%Y\"), \")\")) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nEnd of Data Visualization Chapter and Challenge",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}