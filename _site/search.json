[
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse and Challenge 1",
    "section": "",
    "text": "Part 1: Introduction to the Tidyverse Base Code + Results\n\n# Data Science at TUHH ------------------------------------------------------\n# SALES ANALYSIS ----\n\n# 1.0 Load libraries ----\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(scales)\nlibrary(ggplot2)\nlibrary(lubridate)\n\n# 2.0 Importing Files ----\n# A good convention is to use the file name and suffix it with tbl for the data structure tibble\nbikes_tbl <- read_excel(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdsb-VictorReaver1999\\\\Business_Data_Science\\\\ds_data\\\\01_bike_sales\\\\01_raw_data\\\\bikes.xlsx\")\n\norderlines_tbl <- read_excel(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdsb-VictorReaver1999\\\\Business_Data_Science\\\\ds_data\\\\01_bike_sales\\\\01_raw_data\\\\orderlines.xlsx\")\n\n#> New names:\n#> • `` -> `...1`\n\nbikeshops_tbl  <- read_excel(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdsb-VictorReaver1999\\\\Business_Data_Science\\\\ds_data\\\\01_bike_sales\\\\01_raw_data\\\\bikeshops.xlsx\")\n\n\n# 3.0 Examining Data ----\nprint(\"bikes_tbl\")\n\n#> [1] \"bikes_tbl\"\n\nbikes_tbl\n\n\n\n  \n\n\nprint(\"orderlines_tbl\")\n\n#> [1] \"orderlines_tbl\"\n\norderlines_tbl\n\n\n\n  \n\n\nprint(\"bikeshops_tbl\")\n\n#> [1] \"bikeshops_tbl\"\n\nbikeshops_tbl\n\n\n\n  \n\n\n# 4.0 Joining Data ----\nleft_join(orderlines_tbl, bikes_tbl, by = c(\"product.id\" = \"bike.id\"))\n\n\n\n  \n\n\nbike_orderlines_joined_tbl <- orderlines_tbl %>%\n  left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\")) %>%\n  left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))\n\nprint(\"bike orderlines joined tbl\")\n\n#> [1] \"bike orderlines joined tbl\"\n\nglimpse(bike_orderlines_joined_tbl)\n\n#> Rows: 15,644\n#> Columns: 19\n#> $ ...1           <chr> \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"…\n#> $ order.id       <dbl> 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7…\n#> $ order.line     <dbl> 1, 2, 1, 2, 1, 2, 3, 4, 5, 1, 1, 2, 3, 4, 1, 2, 3, 4, 1…\n#> $ order.date     <dttm> 2015-01-07, 2015-01-07, 2015-01-10, 2015-01-10, 2015-0…\n#> $ customer.id    <dbl> 2, 2, 10, 10, 6, 6, 6, 6, 6, 22, 8, 8, 8, 8, 16, 16, 16…\n#> $ product.id     <dbl> 2681, 2411, 2629, 2137, 2367, 1973, 2422, 2655, 2247, 2…\n#> $ quantity       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1…\n#> $ model          <chr> \"Spectral CF 7 WMN\", \"Ultimate CF SLX Disc 8.0 ETAP\", \"…\n#> $ model.year     <dbl> 2021, 2020, 2021, 2019, 2020, 2020, 2020, 2021, 2020, 2…\n#> $ frame.material <chr> \"carbon\", \"carbon\", \"carbon\", \"carbon\", \"aluminium\", \"c…\n#> $ weight         <dbl> 13.80, 7.44, 14.06, 8.80, 11.50, 8.80, 8.20, 8.85, 14.4…\n#> $ price          <dbl> 3119, 5359, 2729, 1749, 1219, 1359, 2529, 1559, 3899, 6…\n#> $ category       <chr> \"Mountain - Trail - Spectral\", \"Road - Race - Ultimate\"…\n#> $ gender         <chr> \"female\", \"unisex\", \"unisex\", \"unisex\", \"unisex\", \"unis…\n#> $ url            <chr> \"https://www.canyon.com/en-de/mountain-bikes/trail-bike…\n#> $ name           <chr> \"AlexandeRad\", \"AlexandeRad\", \"WITT-RAD\", \"WITT-RAD\", \"…\n#> $ location       <chr> \"Hamburg, Hamburg\", \"Hamburg, Hamburg\", \"Bremen, Bremen…\n#> $ lat            <dbl> 53.57532, 53.57532, 53.07379, 53.07379, 48.78234, 48.78…\n#> $ lng            <dbl> 10.015340, 10.015340, 8.826754, 8.826754, 9.180819, 9.1…\n\n# 5.0 Wrangling Data ----\nprint(\"bike orderlines joined category col, first 20 rows\")\n\n#> [1] \"bike orderlines joined category col, first 20 rows\"\n\nhead(bike_orderlines_joined_tbl$category, n=20)\n\n#>  [1] \"Mountain - Trail - Spectral\"           \n#>  [2] \"Road - Race - Ultimate\"                \n#>  [3] \"Mountain - Trail - Neuron\"             \n#>  [4] \"Road - Triathlon Bike - Speedmax\"      \n#>  [5] \"Mountain - Dirt Jump - Stitched\"       \n#>  [6] \"Hybrid / City - City - Roadlite\"       \n#>  [7] \"Road - Triathlon Bike - Speedmax\"      \n#>  [8] \"Road - Cyclocross - Inflite\"           \n#>  [9] \"Mountain - Enduro - Torque\"            \n#> [10] \"Road - Race - Ultimate\"                \n#> [11] \"E-Bikes - E-Mountain - Grand Canyon:ON\"\n#> [12] \"Road - Race - Ultimate\"                \n#> [13] \"Gravel - All-Road - Grail\"             \n#> [14] \"Mountain - Enduro - Torque\"            \n#> [15] \"Gravel - All-Road - Grail\"             \n#> [16] \"Road - Endurance - Endurace\"           \n#> [17] \"E-Bikes - E-City - Commuter:ON\"        \n#> [18] \"Road - Triathlon Bike - Speedmax\"      \n#> [19] \"Mountain - Trail - Grand Canyon\"       \n#> [20] \"Gravel - All-Road - Grail\"\n\n# All actions are chained with the pipe already. You can perform each step separately and use glimpse() or View() to validate your code. Store the result in a variable at the end of the steps.\nbike_orderlines_wrangled_tbl <- bike_orderlines_joined_tbl %>%\n  # 5.1 Separate category name\n  separate(col    = category,\n           into   = c(\"category.1\", \"category.2\", \"category.3\"),\n           sep    = \" - \") %>%\n\n  # 5.2 Add the total price (price * quantity)\n  # Add a column to a tibble that uses a formula-style calculation of other columns\n  mutate(total.price = price * quantity) %>%\n\n  # 5.3 Optional: Reorganize. Using select to grab or remove unnecessary columns\n  # 5.3.1 by exact column name\n  select(-...1, -gender) %>%\n\n  # 5.3.2 by a pattern\n  # You can use the select_helpers to define patterns.\n  # Type ?ends_with and click on Select helpers in the documentation\n  select(-ends_with(\".id\")) %>%\n\n  # 5.3.3 Actually we need the column \"order.id\". Let's bind it back to the data\n  bind_cols(bike_orderlines_joined_tbl %>% select(order.id)) %>%\n\n  # 5.3.4 You can reorder the data by selecting the columns in your desired order.\n  # You can use select_helpers like contains() or everything()\n  select(order.id, contains(\"order\"), contains(\"model\"), contains(\"category\"),\n         price, quantity, total.price,\n         everything()) %>%\n\n  # 5.4 Rename columns because we actually wanted underscores instead of the dots\n  # (one at the time vs. multiple at once)\n  rename(bikeshop = name) %>%\n  set_names(names(.) %>% str_replace_all(\"\\\\.\", \"_\"))\n\nprint(\"Bike OrderLines Wrangled Table\")\n\n#> [1] \"Bike OrderLines Wrangled Table\"\n\nhead(bike_orderlines_wrangled_tbl, n=10)\n\n\n\n  \n\n\n# 6.0 Business Insights ----\n# 6.1 Sales by Year ----\n\nlibrary(lubridate)\n# Step 1 - Manipulate\nsales_by_year_tbl <- bike_orderlines_wrangled_tbl %>%\n\n  # Select columns\n  select(order_date, total_price) %>%\n\n  # Add year column\n  mutate(year = year(order_date)) %>%\n\n  # Grouping by year and summarizing sales\n  group_by(year) %>%\n  summarize(sales = sum(total_price)) %>%\n\n  # Optional: Add a column that turns the numbers into a currency format\n  # (makes it in the plot optically more appealing)\n  # mutate(sales_text = scales::dollar(sales)) <- Works for dollar values\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\",\n                                     decimal.mark = \",\",\n                                     prefix = \"\",\n                                     suffix = \" €\"))\n\nprint(\"Sales By Year Table\")\n\n#> [1] \"Sales By Year Table\"\n\nsales_by_year_tbl\n\n\n\n  \n\n\n# Step 2 - Visualize\n\nsales_by_year_tbl %>%\n\n  # Setup canvas with the columns year (x-axis) and sales (y-axis)\n  ggplot(aes(x = year, y = sales)) +\n\n  # Geometries\n  geom_col(fill = \"#2DC6D6\") + # Use geom_col for a bar plot\n  geom_label(aes(label = sales_text)) + # Adding labels to the bars\n  geom_smooth(method = \"lm\", se = FALSE) + # Adding a trendline\n\n  # Formatting\n  # scale_y_continuous(labels = scales::dollar) + # Change the y-axis.\n  # Again, we have to adjust it for euro values\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\",\n                                                    decimal.mark = \",\",\n                                                    prefix = \"\",\n                                                    suffix = \" €\")) +\n  labs(\n    title    = \"Revenue by year\",\n    subtitle = \"Upward Trend\",\n    x = \"\", # Override defaults for x and y\n    y = \"Revenue\"\n  )\n\n#> `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nggsave(\"sales_by_year_plot.png\", width = 10, height = 8, dpi = 300)\n\n#> `geom_smooth()` using formula = 'y ~ x'\n\n# 6.2 Sales by Year and Category 2 ----\n\n# Step 1 - Manipulate\nsales_by_year_cat_1_tbl <- bike_orderlines_wrangled_tbl %>%\n\n  # Select columns and add a year\n  select(order_date, total_price, category_1) %>%\n  mutate(year = year(order_date)) %>%\n\n  # Group by and summarize year and main catgegory\n  group_by(year, category_1) %>%\n  summarise(sales = sum(total_price)) %>%\n  ungroup() %>%\n\n  # Format $ Text\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\",\n                                     decimal.mark = \",\",\n                                     prefix = \"\",\n                                     suffix = \" €\"))\n\n#> `summarise()` has grouped output by 'year'. You can override using the\n#> `.groups` argument.\n\nprint(\"Sales By Year Category1 Table\")\n\n#> [1] \"Sales By Year Category1 Table\"\n\nsales_by_year_cat_1_tbl\n\n\n\n  \n\n\n# Step 2 - Visualize\nsales_by_year_cat_1_tbl %>%\n\n  # Set up x, y, fill\n  ggplot(aes(x = year, y = sales, fill = category_1)) +\n\n  # Geometries\n  geom_col() + # Run up to here to get a stacked bar plot\n\n  # Facet\n  facet_wrap(~ category_1) +\n\n  # Formatting\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\",\n                                                    decimal.mark = \",\",\n                                                    prefix = \"\",\n                                                    suffix = \" €\")) +\n  labs(\n    title = \"Revenue by year and main category\",\n    subtitle = \"Each product category has an upward trend\",\n    fill = \"Main category\" # Changes the legend name\n  )\n\n\n\n\n\n\nggsave(\"revenue_by_year_and_category.png\", width = 10, height = 8, dpi = 300)\n\n\n# 7.0 Writing Files ----\n\n# 7.1 Excel ----\n\nbike_orderlines_wrangled_tbl %>%\n  write_xlsx(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdsb-VictorReaver1999\\\\Business_Data_Science\\\\ds_data\\\\01_bike_sales\\\\02_wrangled_data\\\\bike_orderlines.xlsx\")\n\n# # 7.2 CSV ----\nbike_orderlines_wrangled_tbl %>%\n  write_csv(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdsb-VictorReaver1999\\\\Business_Data_Science\\\\ds_data\\\\01_bike_sales\\\\02_wrangled_data\\\\bike_orderlines.csv\")\n\n# # 7.3 RDS ----\nbike_orderlines_wrangled_tbl %>%\n  write_rds(\"C:\\\\Users\\\\fvsha\\\\Documents\\\\GitHub\\\\ss23-bdsb-VictorReaver1999\\\\Business_Data_Science\\\\ds_data\\\\01_bike_sales\\\\02_wrangled_data\\\\bike_orderlines.rds\")\n\nThis is the base code of the Tidyverse section of this course. The steps are as follows: a) Load libraries b) Load the raw data c) Examine data d) Join data as per the instructions e) Wrangle it in order to prepare it for analysis f) Extract business insights through visualization g) Store the wrangled data as xlsx, csv, and rds files\nPart F is the most interesting bit here since this is the ultimate goal of any Data Analysis project which is extracting insights and telling a story\nThe results of the first visualization are shown below which shows the trend line of the sales by year analysis. What we can tell is that the trend line is positive and that sales continously rose from 2016 to 2019 barring the year 2018  The results of the second visualization are shown below which shows the revenue by year and by category simultaneously. We can see that Road and Mountain bikes are best sellers regardless of year and that demand for them is always high\n Part 2:\nThis next part is the challenge from the tidyverse chapter. The first part of the challenge is as follows:\nAnalyze the sales by location (state) with a bar plot. Since state and city are multiple features (variables), they should be split. Which state has the highes revenue? Replace your bike_orderlines_wrangled_tbl object with the newly wrangled object (with the columns state and city).\nHint: Add + theme(axis.text.x = element_text(angle = 45, hjust = 1)) to your plotting code to rotate your x-axis labels. Probably you have to resize the viewer pane to show the entire plot. For your website, try different values for fig.width and fig.height in your markdown document.\n\n# 8.0 Challenge #1 \n\n# Challenge Part 1\nbike_orderlines_wrangled2_tbl <- bike_orderlines_joined_tbl %>%\n  separate(location, into = c(\"city\", \"state\"), sep = \", \") %>%\n  group_by(state) %>%\n  summarize(total_revenue = sum(price * quantity)) %>%\n  arrange(desc(total_revenue)) %>%\n  ggplot(aes(x = state, y = total_revenue)) +\n  geom_bar(stat = \"identity\", fill = \"#0072B2\") +\n  xlab(\"State\") +\n  ylab(\"Total Revenue\") +\n  ggtitle(\"Total Revenue by State\") +\n  scale_y_continuous(labels = comma) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# print(\"bike_orderlines_wrangled2_tbl\")\n# head(bike_orderlines_wrangled2_tbl, n=10)\n\nggsave(\"sales_by_state.png\", width = 10, height = 8, dpi = 300)\n\nThe results of that challenge are seen below. We split the location by city and state and then grouped all the sales data by state. The state that sold the most bikes is North Rhine Westphalia.\nThis could be caused by the presence of mountains and hills in North Rhine-Westphalia. The highest mountain in the state is the Langenberg, which is part of the Rothaar Mountains and has an elevation of 843 meters (2,766 feet). The Sauerland region, located in the eastern part of North Rhine-Westphalia, is also known for its hilly terrain and scenic landscapes. Additionally, there are several other smaller mountain ranges in the state, including the Ebbegebirge, the Wiehengebirge, and the Teutoburg Forest.\n\n\nTotal Revenue by State\n\n\nThe second and last part of the tidy verse challenge is as follows:\nAnalyze the sales by location and year (facet_wrap). Because there are 12 states with bike stores, you should get 12 plots\nThe code is below. I folloed\n\n# Challenge Part 2\n# Group the data by location (state) and year, and calculate the total revenue\nbike_orderlines_wrangled3_tbl <- bike_orderlines_joined_tbl %>%\n  separate(location, into = c(\"city\", \"state\"), sep = \", \") %>%\n  mutate(year = year(order.date)) %>%\n  mutate(revenue = quantity * price) %>%\n  group_by(state, year) %>%\n  summarise(total_revenue = sum(revenue))\n\n#> `summarise()` has grouped output by 'state'. You can override using the\n#> `.groups` argument.\n\n# Plot the data using facet_wrap\nggplot(bike_orderlines_wrangled3_tbl, aes(x = year, y = total_revenue)) +\n  geom_col() +\n  labs(x = \"Year\", y = \"Total Revenue\") +\n  facet_wrap(~ state, ncol = 4) +\n  scale_y_continuous(labels = comma) +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  ggtitle(\"Sales by Location and Year\")\n\n\n\n\n\n\n# Save the plot as a PNG file\nggsave(\"sales_by_location_and_year.png\", dpi = 300)\n\n#> Saving 7 x 5 in image\n\n\nThe results are below:\n\n\nSales by Location and Year\n\n\nThis image shows that aggregated annual sales in North Rhine Westphalia are dominant whe compared to other states for reasons outlined earlier.\nThis marks the end of the Tidyverse Chapter and Challenge."
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science Journal",
    "section": "",
    "text": "This is my data science journal where you will see the code and results of various projects or tasks.\nThere are 5 parts to it in total"
  }
]